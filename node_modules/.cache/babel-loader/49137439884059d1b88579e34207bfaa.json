{"ast":null,"code":"import { refreshVoters } from '../actions/AppActions';\nimport { refreshElections } from '../actions/ElectionActions';\nexport const CAPTURE_ELECTION_VOTES_ACTION = \"CAPTURE_ELECTION_VOTES\";\nexport const SET_CURRENT_ELECTION_ACTION = \"SET_CURRENT_ELECTION\";\nexport const SET_CURRENT_VOTER_ACTION = \"SET_CURRENT_VOTER\"; // start capture election votes action\n\nexport const createCaptureElectionVotesAction = election => ({\n  type: CAPTURE_ELECTION_VOTES_ACTION,\n  payload: {\n    election\n  }\n});\nexport const submitElectionVotes = election => {\n  return async dispatch => {\n    dispatch(createCaptureElectionVotesAction(election));\n    await fetch(`http://localhost:3060/elections/${encodeURIComponent(election.id.toString())}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(election)\n    });\n    refreshVoters()(dispatch);\n    refreshElections()(dispatch);\n  };\n}; // end capture election votes action\n// start handle return\n\nexport const handleReturn = () => {\n  return async dispatch => {\n    dispatch(createSetCurrentElectionAction({}));\n    dispatch(createSetCurrentVoterAction({}));\n  };\n}; // end handle return\n// start set current election action\n\nexport const createSetCurrentElectionAction = election => ({\n  type: SET_CURRENT_ELECTION_ACTION,\n  payload: {\n    election\n  }\n});\nexport function isSetCurrentElectionAction(action) {\n  return [SET_CURRENT_ELECTION_ACTION].includes(action.type);\n} // end set current election action\n// start set current voter action\n\nexport const createSetCurrentVoterAction = voter => ({\n  type: SET_CURRENT_VOTER_ACTION,\n  payload: {\n    voter\n  }\n});\nexport function isSetCurrentVoterAction(action) {\n  return [SET_CURRENT_VOTER_ACTION].includes(action.type);\n} // end set current voter action","map":{"version":3,"sources":["/Users/rashmid379/dev/training/FE_Bootcamp/OnlineVotingApp/src/actions/CaptureVotesActions.ts"],"names":["refreshVoters","refreshElections","CAPTURE_ELECTION_VOTES_ACTION","SET_CURRENT_ELECTION_ACTION","SET_CURRENT_VOTER_ACTION","createCaptureElectionVotesAction","election","type","payload","submitElectionVotes","dispatch","fetch","encodeURIComponent","id","toString","method","headers","body","JSON","stringify","handleReturn","createSetCurrentElectionAction","createSetCurrentVoterAction","isSetCurrentElectionAction","action","includes","voter","isSetCurrentVoterAction"],"mappings":"AAEA,SAASA,aAAT,QAA8B,uBAA9B;AACA,SAASC,gBAAT,QAAiC,4BAAjC;AAEA,OAAO,MAAMC,6BAA6B,GAAG,wBAAtC;AACP,OAAO,MAAMC,2BAA2B,GAAG,sBAApC;AACP,OAAO,MAAMC,wBAAwB,GAAG,mBAAjC,C,CAEP;;AAOA,OAAO,MAAMC,gCAAkE,GAAIC,QAAD,KAAe;AAC/FC,EAAAA,IAAI,EAAEL,6BADyF;AAE/FM,EAAAA,OAAO,EAAE;AAAEF,IAAAA;AAAF;AAFsF,CAAf,CAA3E;AAKP,OAAO,MAAMG,mBAAmB,GAAIH,QAAD,IAAwB;AACzD,SAAO,MAAOI,QAAP,IAA8B;AACnCA,IAAAA,QAAQ,CAACL,gCAAgC,CAACC,QAAD,CAAjC,CAAR;AACA,UAAMK,KAAK,CAAE,mCAAkCC,kBAAkB,CAACN,QAAQ,CAACO,EAAT,CAAYC,QAAZ,EAAD,CAAyB,EAA/E,EAAkF;AAC3FC,MAAAA,MAAM,EAAE,KADmF;AAE3FC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFkF;AAG3FC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeb,QAAf;AAHqF,KAAlF,CAAX;AAKAN,IAAAA,aAAa,GAAGU,QAAH,CAAb;AACAT,IAAAA,gBAAgB,GAAGS,QAAH,CAAhB;AACD,GATD;AAUD,CAXM,C,CAYP;AAEA;;AACA,OAAO,MAAMU,YAAY,GAAG,MAAM;AAChC,SAAO,MAAOV,QAAP,IAA8B;AACnCA,IAAAA,QAAQ,CAACW,8BAA8B,CAAC,EAAD,CAA/B,CAAR;AACAX,IAAAA,QAAQ,CAACY,2BAA2B,CAAC,EAAD,CAA5B,CAAR;AACD,GAHD;AAID,CALM,C,CAOP;AAEA;;AAOA,OAAO,MAAMD,8BAA8D,GAAIf,QAAD,KAAe;AAC3FC,EAAAA,IAAI,EAAEJ,2BADqF;AAE3FK,EAAAA,OAAO,EAAE;AAAEF,IAAAA;AAAF;AAFkF,CAAf,CAAvE;AAKP,OAAO,SAASiB,0BAAT,CAAoCC,MAApC,EAAgG;AACrG,SAAO,CAACrB,2BAAD,EAA8BsB,QAA9B,CAAuCD,MAAM,CAACjB,IAA9C,CAAP;AACD,C,CAED;AAEA;;AAOA,OAAO,MAAMe,2BAAwD,GAAII,KAAD,KAAY;AAClFnB,EAAAA,IAAI,EAAEH,wBAD4E;AAElFI,EAAAA,OAAO,EAAE;AAAEkB,IAAAA;AAAF;AAFyE,CAAZ,CAAjE;AAKP,OAAO,SAASC,uBAAT,CAAiCH,MAAjC,EAA0F;AAC/F,SAAO,CAACpB,wBAAD,EAA2BqB,QAA3B,CAAoCD,MAAM,CAACjB,IAA3C,CAAP;AACD,C,CAED","sourcesContent":["import { Action, Dispatch } from 'redux';\nimport { Election, Voter } from '../models/App';\nimport { refreshVoters } from '../actions/AppActions';\nimport { refreshElections } from '../actions/ElectionActions';\n\nexport const CAPTURE_ELECTION_VOTES_ACTION = \"CAPTURE_ELECTION_VOTES\";\nexport const SET_CURRENT_ELECTION_ACTION = \"SET_CURRENT_ELECTION\";\nexport const SET_CURRENT_VOTER_ACTION = \"SET_CURRENT_VOTER\";\n\n// start capture election votes action\nexport interface CaptureElectionVotesAction extends Action<string> {\n  payload: { election: Election }\n}\n\nexport type CreateCaptureElectionVotesAction = (election: Election) => CaptureElectionVotesAction;\n\nexport const createCaptureElectionVotesAction: CreateCaptureElectionVotesAction = (election) => ({\n  type: CAPTURE_ELECTION_VOTES_ACTION,\n  payload: { election }\n});\n\nexport const submitElectionVotes = (election: Election) => {\n  return async (dispatch: Dispatch) => {\n    dispatch(createCaptureElectionVotesAction(election));\n    await fetch(`http://localhost:3060/elections/${encodeURIComponent(election.id.toString())}`, {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(election),\n    });\n    refreshVoters()(dispatch);\n    refreshElections()(dispatch);\n  };\n};\n// end capture election votes action\n\n// start handle return\nexport const handleReturn = () => {\n  return async (dispatch: Dispatch) => {\n    dispatch(createSetCurrentElectionAction({} as Election));\n    dispatch(createSetCurrentVoterAction({} as Voter));\n  };\n};\n\n// end handle return\n\n// start set current election action\nexport interface SetCurrentElectionAction extends Action<string> {\n  payload: { election: Election }\n}\n\nexport type CreateSetCurrentElectionAction = (election: Election) => SetCurrentElectionAction;\n\nexport const createSetCurrentElectionAction: CreateSetCurrentElectionAction = (election) => ({\n  type: SET_CURRENT_ELECTION_ACTION,\n  payload: { election }\n});\n\nexport function isSetCurrentElectionAction(action: Action<string>): action is SetCurrentElectionAction {\n  return [SET_CURRENT_ELECTION_ACTION].includes(action.type);\n}\n\n// end set current election action\n\n// start set current voter action\nexport interface SetCurrentVoterAction extends Action<string> {\n  payload: { voter: Voter }\n}\n\nexport type CreateSetCurrentVoterAction = (voter: Voter) => SetCurrentVoterAction;\n\nexport const createSetCurrentVoterAction: CreateSetCurrentVoterAction = (voter) => ({\n  type: SET_CURRENT_VOTER_ACTION,\n  payload: { voter }\n});\n\nexport function isSetCurrentVoterAction(action: Action<string>): action is SetCurrentVoterAction {\n  return [SET_CURRENT_VOTER_ACTION].includes(action.type);\n}\n\n// end set current voter action\n\n"]},"metadata":{},"sourceType":"module"}