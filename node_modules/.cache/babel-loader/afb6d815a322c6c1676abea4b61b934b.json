{"ast":null,"code":"import { useState } from 'react';\n\n// type guard\nfunction isInput(x) {\n  return x instanceof HTMLInputElement;\n}\n\nexport const useForm = initialForm => {\n  const [form, setForm] = useState({ ...initialForm\n  });\n\n  const change = e => {\n    setForm({ ...form,\n      [e.target.name]: isInput(e.target) && e.target.type === 'number' ? e.target.valueAsNumber : e.target.value\n    });\n  };\n\n  const resetForm = () => setForm({ ...initialForm\n  });\n\n  return [form, change, resetForm];\n};","map":{"version":3,"sources":["/Users/rashmid379/dev/training/FE_Bootcamp/OnlineVotingApp/src/hooks/useForm.ts"],"names":["useState","isInput","x","HTMLInputElement","useForm","initialForm","form","setForm","change","e","target","name","type","valueAsNumber","value","resetForm"],"mappings":"AAAA,SAASA,QAAT,QAAsC,OAAtC;;AAQE;AACF,SAASC,OAAT,CAAiBC,CAAjB,EAAgD;AAC5C,SAAOA,CAAC,YAAYC,gBAApB;AACD;;AAGH,OAAO,MAAMC,OAAgB,GAAIC,WAAD,IAAiB;AAEjD,QAAM,CAAEC,IAAF,EAAQC,OAAR,IAAoBP,QAAQ,CAAC,EAAE,GAAGK;AAAL,GAAD,CAAlC;;AAEA,QAAMG,MAAM,GAAIC,CAAD,IAAsC;AAEjDF,IAAAA,OAAO,CAAC,EACR,GAAGD,IADK;AAER,OAAEG,CAAC,CAACC,MAAF,CAASC,IAAX,GAAmBV,OAAO,CAACQ,CAAC,CAACC,MAAH,CAAP,IAAqBD,CAAC,CAACC,MAAF,CAASE,IAAT,KAAkB,QAAvC,GACbH,CAAC,CAACC,MAAF,CAASG,aADI,GACYJ,CAAC,CAACC,MAAF,CAASI;AAHhC,KAAD,CAAP;AAMH,GARD;;AAUA,QAAMC,SAAS,GAAG,MAAMR,OAAO,CAAC,EAAE,GAAGF;AAAL,GAAD,CAA/B;;AAEA,SAAO,CAAEC,IAAF,EAAQE,MAAR,EAAgBO,SAAhB,CAAP;AAEC,CAlBM","sourcesContent":["import { useState, ChangeEvent } from 'react';\n\ntype HTMLFormControls =\n  HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\n\ntype UseForm = <FormDataType>(initialForm: FormDataType) =>\n  ([ FormDataType, (e: ChangeEvent<HTMLFormControls>) => void, () => void ]);\n\n  // type guard\nfunction isInput(x: any): x is HTMLInputElement {\n    return x instanceof HTMLInputElement;\n  }\n  \n  \nexport const useForm: UseForm = (initialForm) => {\n\nconst [ form, setForm ] = useState({ ...initialForm });\n\nconst change = (e: ChangeEvent<HTMLFormControls>) => {\n\n    setForm({\n    ...form,\n    [ e.target.name ]: isInput(e.target) && e.target.type === 'number'\n        ? e.target.valueAsNumber : e.target.value,\n    });\n\n};\n\nconst resetForm = () => setForm({ ...initialForm });\n\nreturn [ form, change, resetForm ];\n\n};"]},"metadata":{},"sourceType":"module"}